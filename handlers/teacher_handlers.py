import logging
from database import SessionLocal, get_user, create_lesson, get_user_bookings, get_user_schedule, Lesson, Booking
from aiogram.fsm.context import FSMContext
from aiogram import types  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ F –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É
from datetime import datetime, timedelta
from sqlalchemy.exc import SQLAlchemyError

# –ê—Ä—Ç–µ–º: –î–æ–¥–∞–≤ —à–µ–¥–µ–≤—Ä–æ–∑–∞—Ö–∏—Å—Ç, —â–æ–± –∑–∞–¥–Ω—ñ–º —á–∏—Å–ª–æ–º —É—Ä–æ–∫–∏ –Ω–µ —Å—Ç–∞–≤–∏–ª–∏
async def setschedule_command(message: types.Message):
    try:
        command_parts = message.text.split()
        if len(command_parts) != 3:
            await message.answer("–§–æ—Ä–º–∞—Ç: /set_schedule_slot <–¥–∞—Ç–∞> <—á–∞—Å>")
            return

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        date_str = command_parts[1]
        time_str = command_parts[2]
        date_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–∞—Ç–∞ —â–µ –Ω–µ –º–∏–Ω—É–ª–∞
        current_time = datetime.now()
        if date_time < current_time:
            await message.answer("–ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —É—Ä–æ–∫ –Ω–∞ –º–∏–Ω—É–ª—É –¥–∞—Ç—É.")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–∏–∫–ª–∞–¥–∞—á–µ–º
        user_id = message.from_user.id
        with SessionLocal() as db:
            user = get_user(db, user_id)
            if not user or not user.is_teacher:
                await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.")
                return

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫—É
            new_lesson = create_lesson(db, user.id, date_time)
            await message.answer(f"–î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —É—Ä–æ–∫ –Ω–∞ {date_time.strftime('%Y-%m-%d %H:%M')}")
            logging.info(f"–í–∏–∫–ª–∞–¥–∞—á {user_id} –¥–æ–¥–∞–≤ –Ω–æ–≤–∏–π —É—Ä–æ–∫ –Ω–∞ {date_time}")

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏/—á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —É—Ä–æ–∫—É: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —É—Ä–æ–∫—É.")

# –¶–µ –º–∞–±—É—Ç—å –≤–∏–¥–∞–ª–∏—Ç–∏
async def viewbookings_command(message: types.Message):
    user_id = message.from_user.id

    with SessionLocal() as db:
        try:
            user = get_user(db, user_id)
            if not user or not user.is_teacher:
                await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.")
                return

            bookings = get_user_bookings(db, user.id, is_teacher=True)
            if bookings:
                response = "–í–∞—à—ñ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ —É—Ä–æ–∫–∏:\n"
                for booking in bookings:
                    student = booking.student
                    lesson = booking.lesson
                    response += f"ID: {booking.id} | –î–∞—Ç–∞: {lesson.date_time.strftime('%Y-%m-%d %H:%M')} | "
                    response += f"–£—á–µ–Ω—å: {student.full_name} | –°—Ç–∞—Ç—É—Å: {booking.status}\n"
            else:
                response = "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏—Ö —É—Ä–æ–∫—ñ–≤."

            await message.answer(response)
            logging.info(f"–í–∏–∫–ª–∞–¥–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å–≤–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω—å: {e}")
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω—å.")

# –í–∏–≤—ñ–¥ –≤—Å—ñ—Ö —É—Ä–æ–∫—ñ–≤, –∞–π–¥—ñ, —Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —è–∫—ñ –Ω–∞ —É—Ä–æ–∫–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å
async def check_and_show_schedule(message: types.Message):
    user_id = message.from_user.id

    with SessionLocal() as db:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–ª–∞–¥–∞—á–µ–º
            user = get_user(db, user_id)
            if not user or not user.is_teacher:
                await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.")
                return

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫ - –Ω–µ–¥—ñ–ª—è)
            today = datetime.today()
            start_of_week = today - timedelta(days=today.weekday())
            end_of_week = start_of_week + timedelta(days=6, hours=23, minutes=59, seconds=59)

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
            lessons = get_user_schedule(db, user.id, start_of_week, end_of_week)

            if not lessons:
                await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —É—Ä–æ–∫—ñ–≤ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å.")
                return

            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Ä–æ–∑–∫–ª–∞–¥—É
            header = f"{'ID —Å–ª–æ—Ç–∞':<10} | {'–î–∞—Ç–∞':<12} | {'–ß–∞—Å':<6} | {'–°—Ç–∞–Ω':<12} | {'–£—á–µ–Ω—å':<20}\n"
            separator = "-" * 65 + "\n"
            rows = []

            for lesson in lessons:
                slot_id = lesson.id
                date = lesson.date_time.strftime('%Y-%m-%d')
                time = lesson.date_time.strftime('%H:%M')
                booking_status = "–ó–∞–±—Ä." if lesson.is_booked else "–í—ñ–ª—å–Ω."

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —ñ —Å—Ç—É–¥–µ–Ω—Ç–∞
                if lesson.booking:
                    student_name = lesson.booking.student.full_name
                else:
                    student_name = "-"

                rows.append(f"{slot_id:<10} | {date:<12} | {time:<6} | {booking_status:<12} | {student_name:<20}")

            # –ó–±—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            response = "üìÖ *–í–∞—à —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:*\n\n" + header + separator + "\n".join(rows)

            await message.answer(response, parse_mode="Markdown")
            logging.info(f"–í–∏–∫–ª–∞–¥–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å")

        except SQLAlchemyError as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        except Exception as e:
            logging.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            await message.answer("–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞.")

# –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ª–æ—Ç–∞ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
async def slot_cancel_command(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–±–∏–≤–∞—î–º–æ –π–æ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    args = message.text.split()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î ID —Å–ª–æ—Ç–∞ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —Ç–∞ —á–∏ —î –≤—ñ–Ω —á–∏—Å–ª–æ–º
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Å–ª–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return

    lesson_id = int(args[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ID —Å–ª–æ—Ç–∞

    with SessionLocal() as db:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–ª–∞–¥–∞—á–µ–º
            user = get_user(db, message.from_user.id)
            if not user or not user.is_teacher:
                await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.")
                return

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É—Ä–æ–∫—É –∑–∞ –π–æ–≥–æ ID
            lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()

            # –Ø–∫—â–æ —É—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            if not lesson:
                await message.answer(f"–£—Ä–æ–∫ –∑ ID {lesson_id} –Ω–µ —ñ—Å–Ω—É—î.")
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —É—Ä–æ–∫ –Ω–∞–ª–µ–∂–∏—Ç—å —Ü—å–æ–º—É –≤–∏–∫–ª–∞–¥–∞—á–µ–≤—ñ
            if lesson.teacher_id != user.id:
                await message.answer("–¶–µ–π —É—Ä–æ–∫ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.")
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —É—Ä–æ–∫ –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏–π
            if lesson.is_booked:
                await message.answer("–¶–µ–π —É—Ä–æ–∫ –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ —ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
                return

            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —É—Ä–æ–∫—É
            db.delete(lesson)
            db.commit()
            await message.answer(f"–£—Ä–æ–∫ –∑ ID {lesson_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")

        except SQLAlchemyError as e:
            db.rollback()
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —É—Ä–æ–∫—É: {e}")
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —É—Ä–æ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

        except Exception as e:
            logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            await message.answer("–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def book_cancel_command(message: types.Message):
    try:
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: /cancel <id_–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è>")
            return

        booking_id = int(command_parts[1])
        user_id = message.from_user.id

        with SessionLocal() as db:
            user = get_user(db, user_id)
            if not user:
                await message.answer("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.")
                return

            booking = db.query(Booking).filter(Booking.id == booking_id).first()
            if not booking or (not user.is_teacher and booking.student_id != user.id):
                await message.answer("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –π–æ–≥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
                return

            booking.status = "cancelled"
            booking.lesson.is_booked = False
            db.commit()

            await message.answer(f"–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è #{booking_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–∫–∞—Å—É–≤–∞–≤ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è {booking_id}")

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
        logging.warning("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥–∏ /cancel")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")